/*1.0*/
/*已验证*/

$	FUNCTION node_ele_positions	获取模型中所有单元和节点位置的函数(与单元ID一一对应)
$	FUNCTION one_lbc_resultant	求一个load力与力矩（取计算点）的函数
$	FUNCTION lbc_resultants		求当前工况全船合力的函数

CLASS r
	CLASSWIDE INTEGER cw_num_nodes
	CLASSWIDE INTEGER cw_node_ids(VIRTUAL)
	CLASSWIDE REAL cw_node_positions(VIRTUAL)
	CLASSWIDE INTEGER cw_num_elements
	CLASSWIDE INTEGER cw_element_ids(VIRTUAL)
	CLASSWIDE REAL cw_element_positions(VIRTUAL)
	
	/*获取模型中所有单元和节点位置的函数(与单元ID一一对应)*//*已检查*/
	FUNCTION node_ele_positions()
		REAL node_positions_temp(VIRTUAL)
		REAL element_positions_temp(VIRTUAL)
		INTEGER ref_coords(VIRTUAL)
		INTEGER analy_coords(VIRTUAL)
		STRING str_element_ids[VIRTUAL]
		INTEGER entity_count
		INTEGER i
				
		/*获取节点位置*/
		db_count_nodes(cw_num_nodes)
		sys_allocate_array(cw_node_ids , 1 , cw_num_nodes)
		sys_allocate_array(node_positions_temp , 1, cw_num_nodes , 1 , 3)
		sys_allocate_array(ref_coords , 1 , cw_num_nodes)
		sys_allocate_array(analy_coords , 1 , cw_num_nodes)		
		db_get_node_ids(cw_num_nodes , cw_node_ids)
		db_get_nodes(cw_num_nodes , cw_node_ids , ref_coords , analy_coords , node_positions_temp)
		
		/*获取单元位置*/
		db_count_elems(cw_num_elements)
		sys_allocate_array(cw_element_ids , 1 , cw_num_elements)
		db_get_elem_ids(cw_num_elements , cw_element_ids)
		app_int_array_to_vstring("Elm" , cw_num_elements , cw_element_ids , str_element_ids)
		fem_geom_elem_location(str_element_ids , element_positions_temp , entity_count)
		
		/*使单元节点编号与其位置对应*/
		sys_allocate_array(cw_node_positions , 1 , cw_node_ids(cw_num_nodes) , 1 , 3)
		sys_allocate_array(cw_element_positions , 1 , cw_element_ids(cw_num_elements) , 1 , 3)
		FOR(i = 1 TO cw_num_nodes)
			cw_node_positions(cw_node_ids(i) , 1) = node_positions_temp(i , 1)
			cw_node_positions(cw_node_ids(i) , 2) = node_positions_temp(i , 2)
			cw_node_positions(cw_node_ids(i) , 3) = node_positions_temp(i , 3)
		END FOR
		FOR(i = 1 TO cw_num_elements)
			cw_element_positions(cw_element_ids(i) , 1) = element_positions_temp(i , 1)
			cw_element_positions(cw_element_ids(i) , 2) = element_positions_temp(i , 2)
			cw_element_positions(cw_element_ids(i) , 3) = element_positions_temp(i , 3)
		END FOR		
	
$	dump cw_num_nodes
$	dump cw_node_ids
$	dump cw_node_positions
$	dump cw_num_elements
$	dump cw_element_ids
$	dump cw_element_positions
	END FUNCTION
	
	/*求一个load力与力矩（取计算点）的函数*//*已检查*/
	FUNCTION one_lbc_resultant(calculate_point , load_id , one_load_resultant)
		REAL calculate_point()
		INTEGER load_id
		REAL one_load_resultant()
		
		STRING load_name[32]
		INTEGER load_type
		INTEGER application_type
		INTEGER elem_dimension
		INTEGER coord_id
		INTEGER dynamic_flag
		INTEGER num_values
		INTEGER i
		INTEGER load_var_id
		INTEGER entity_type
		INTEGER entity_id
		INTEGER sub_entity_id
		REAL load_value(3)
		INTEGER null_vector(3)
		REAL scale_factor
		INTEGER node_position
		INTEGER region_type
		REAL load_value_S
		REAL element_area
		REAL element_normal(3)
		REAL sqrt_element_normal
		REAL temp_x
		REAL temp_y
		REAL temp_z
		REAL mass_prop_mass_props_array(VIRTUAL)
		STRING mass_prop_entity_list[VIRTUAL]
		STRING mass_prop_reject_list[VIRTUAL]
		INTEGER mass_prop_noutputs
		STRING mass_prop_gnames_out[32](VIRTUAL)
		INTEGER mass_prop_entities(VIRTUAL)
		INTEGER mass_prop_entity_types(VIRTUAL)
		INTEGER mass_prop_len_elist
		INTEGER mass_prop_num_ents
		INTEGER mass_prop_len_rlist
		INTEGER mass_prop_num_rejects
		INTEGER mass_prop_segment_id
		INTEGER mass_prop_cord_label
		INTEGER mass_prop_user_cord_label
		INTEGER bk_nbr
		INTEGER bk_vid(1)
		REAL bk_rv(1,3)
		INTEGER bk_ve_pos(1,3)
		INTEGER bk_nv(1,3)
		REAL bk_scale_factor(1)
		INTEGER n_i_status /*表征函数是否执行，解决计算利用csv离散场生成的force或pressure时的BUG*/
		
		db_get_lbc(load_id , load_name , load_type , application_type , @
					elem_dimension , coord_id , dynamic_flag)/*获取Load信息*/		
		FOR(i = 1 TO 6)
			one_load_resultant(i) = 0.0
		END FOR
		IF(load_type == 7)THEN/*7为force*/
			db_get_lbc_fem_count(load_id , num_values)
			db_get_all_fem_sv_by_id(load_id)
			FOR(i = 1 TO num_values)
				n_i_status = db_get_next_fem_sv_by_id(load_var_id , entity_type , entity_id , @
															sub_entity_id , load_value , null_vector , @
															scale_factor , node_position , region_type)
				IF((n_i_status == 0) && (entity_id > 0))THEN
					IF(load_var_id == 1)THEN
						one_load_resultant(1) += load_value(1) * scale_factor
						one_load_resultant(2) += load_value(2) * scale_factor
						one_load_resultant(3) += load_value(3) * scale_factor
						one_load_resultant(4) += (cw_node_positions(entity_id , 2) - calculate_point(2)) * load_value(3) * scale_factor - (cw_node_positions(entity_id , 3) - calculate_point(3)) * load_value(2) * scale_factor
						one_load_resultant(5) += (cw_node_positions(entity_id , 3) - calculate_point(3)) * load_value(1) * scale_factor - (cw_node_positions(entity_id , 1) - calculate_point(1)) * load_value(3) * scale_factor
						one_load_resultant(6) += (cw_node_positions(entity_id , 1) - calculate_point(1)) * load_value(2) * scale_factor - (cw_node_positions(entity_id , 2) - calculate_point(2)) * load_value(1) * scale_factor
					ELSE IF(load_var_id == 2)THEN
						one_load_resultant(4) += load_value(1) * scale_factor
						one_load_resultant(5) += load_value(2) * scale_factor
						one_load_resultant(6) += load_value(3) * scale_factor
					END IF
				END IF
			END FOR								
		ELSE IF(load_type == 8)THEN/*8为pressure*/
			db_get_lbc_fem_count(load_id , num_values)
			db_get_all_fem_ss_by_id(load_id)
			FOR(i = 1 TO num_values)
				n_i_status = db_get_next_fem_ss_by_id(load_var_id , entity_type , entity_id , @
										sub_entity_id , load_value_s , scale_factor , @
										node_position , region_type)
				IF((n_i_status == 0) && (entity_id > 0))THEN
					IF(entity_type == 124)THEN
						lbc_get_shell_area(entity_id , element_area)
						lbc_get_shell_normal(entity_id , element_normal)
						sqrt_element_normal = sqrt(element_normal(1)**2 + element_normal(2)**2 + element_normal(3)**2)
						IF(load_var_id == 1)THEN
							temp_x = load_value_s * element_area * element_normal(1) / sqrt_element_normal * scale_factor
							temp_y = load_value_s * element_area * element_normal(2) / sqrt_element_normal * scale_factor
							temp_z = load_value_s * element_area * element_normal(3) / sqrt_element_normal * scale_factor
							one_load_resultant(1) += temp_x
							one_load_resultant(2) += temp_y
							one_load_resultant(3) += temp_z
							one_load_resultant(4) += (cw_element_positions(entity_id , 2) - calculate_point(2)) * temp_z - (cw_element_positions(entity_id , 3) - calculate_point(3)) * temp_y
							one_load_resultant(5) += (cw_element_positions(entity_id , 3) - calculate_point(3)) * temp_x - (cw_element_positions(entity_id , 1) - calculate_point(1)) * temp_z
							one_load_resultant(6) += (cw_element_positions(entity_id , 1) - calculate_point(1)) * temp_y - (cw_element_positions(entity_id , 2) - calculate_point(2)) * temp_x
						ELSE IF(load_var_id == 2)THEN
							temp_x = load_value_s * element_area * element_normal(1) / sqrt_element_normal * scale_factor * -1
							temp_y = load_value_s * element_area * element_normal(2) / sqrt_element_normal * scale_factor * -1
							temp_z = load_value_s * element_area * element_normal(3) / sqrt_element_normal * scale_factor * -1
							one_load_resultant(1) += temp_x
							one_load_resultant(2) += temp_y
							one_load_resultant(3) += temp_z
							one_load_resultant(4) += (cw_element_positions(entity_id , 2) - calculate_point(2)) * temp_z - (cw_element_positions(entity_id , 3) - calculate_point(3)) * temp_y
							one_load_resultant(5) += (cw_element_positions(entity_id , 3) - calculate_point(3)) * temp_x - (cw_element_positions(entity_id , 1) - calculate_point(1)) * temp_z
							one_load_resultant(6) += (cw_element_positions(entity_id , 1) - calculate_point(1)) * temp_y - (cw_element_positions(entity_id , 2) - calculate_point(2)) * temp_x
						END IF
					ELSE IF(entity_type == 154)THEN
						IF(load_var_id == 3)THEN
							/*这部分是计算edge pressure的，不想写*/
						END IF
					ELSE IF(entity_type == 153)THEN
						/*这部分是计算体单元face pressure的，不想写*/
					END IF
				END IF
			END FOR
		ELSE IF(load_type == 10)THEN/*10为inertial load,目前仅能计算线加速度部分*/
			mass_prop.cleanup_detailed(mass_prop_mass_props_array,mass_prop_entity_list,mass_prop_reject_list)
			mass_prop_create_detailed("3D", "All", "FEM", "Summary", 0, [""], "", "Coord 0", "Use Element Properties",@
									"Use Element Properties","Coord 0",3,1,FALSE,FALSE,@
									mass_prop_noutputs,mass_prop_gnames_out,mass_prop_entities,@
									mass_prop_entity_types,mass_prop_mass_props_array,mass_prop_entity_list,@
									mass_prop_len_elist,mass_prop_num_ents,mass_prop_reject_list,mass_prop_len_rlist,@
									mass_prop_num_rejects,mass_prop_segment_id,mass_prop_cord_label,mass_prop_user_cord_label)
			db_bulk_get_lbc_sv(load_id , 1 , bk_nbr , bk_vid , bk_rv , bk_ve_pos , bk_nv , bk_scale_factor)		
			IF(bk_vid(1) == 1)THEN
				one_load_resultant(1) = mass_prop_mass_props_array(1,2) * bk_rv(1,1) * bk_scale_factor(1)
				one_load_resultant(2) = mass_prop_mass_props_array(1,2) * bk_rv(1,2) * bk_scale_factor(1)
				one_load_resultant(3) = mass_prop_mass_props_array(1,2) * bk_rv(1,3) * bk_scale_factor(1)
				one_load_resultant(4) = (mass_prop_mass_props_array(1,4) - calculate_point(2)) * mass_prop_mass_props_array(1,2) * bk_rv(1,3) * bk_scale_factor(1) - (mass_prop_mass_props_array(1,5) - calculate_point(3)) * mass_prop_mass_props_array(1,2) * bk_rv(1,2) * bk_scale_factor(1)
				one_load_resultant(5) = (mass_prop_mass_props_array(1,5) - calculate_point(3)) * mass_prop_mass_props_array(1,2) * bk_rv(1,1) * bk_scale_factor(1) - (mass_prop_mass_props_array(1,3) - calculate_point(1)) * mass_prop_mass_props_array(1,2) * bk_rv(1,3) * bk_scale_factor(1)
				one_load_resultant(6) = (mass_prop_mass_props_array(1,3) - calculate_point(1)) * mass_prop_mass_props_array(1,2) * bk_rv(1,2) * bk_scale_factor(1) - (mass_prop_mass_props_array(1,4) - calculate_point(2)) * mass_prop_mass_props_array(1,2) * bk_rv(1,1) * bk_scale_factor(1)
			END IF
		ELSE IF(load_type == 34)THEN/*34为distributed load*/
			/*这部分是计算distributed load的，不想写*/
		END IF
	END FUNCTION
		
	/*求当前工况全船合力的函数*//*已检查*/
	FUNCTION lbc_resultants()		
		REAL calculate_point(3)
		REAL load_resultants(6)
		
		STRING current_lc_name[32]
		INTEGER load_case_id
		REAL load_case_scale_fator
		INTEGER load_case_type
		STRING load_case_description[256]
		INTEGER num_loads
		INTEGER load_ids(VIRTUAL)
		REAL load_scale_factors(VIRTUAL)
		INTEGER load_priorities(VIRTUAL)
		STRING dynamic_case_name[32]
		REAL evaluation_point
		INTEGER i
		INTEGER j
		STRING load_name[32]
		INTEGER load_type
		INTEGER application_type
		INTEGER elem_dimension
		INTEGER coord_id
		INTEGER dynamic_flag
		REAL one_load_resultant(6)
		
		calculate_point(1) = 0.0
		calculate_point(2) = 0.0
		calculate_point(3) = 0.0
		
		r.node_ele_positions()
		
		FOR(i = 1 TO 6)
			load_resultants(i) = 0.0
		END FOR
		
		db_get_active_load_case(current_lc_name)/*获取当前Load Case名*/
		db_count_lbc_by_load_case(current_lc_name , num_loads)
		sys_allocate_array(load_ids , 1 , num_loads)
		sys_allocate_array(load_scale_factors , 1 , num_loads)
		sys_allocate_array(load_priorities , 1 , num_loads)
		db_get_load_case2(current_lc_name , load_case_id , load_case_scale_fator , @
							load_case_type , load_case_description , num_loads , @
							load_ids , load_scale_factors , load_priorities , @
							dynamic_case_name , evaluation_point)/*获取当前Load Case信息*/
		
$		dump current_lc_name
$		dump num_loads
$		dump load_ids
$		dump load_case_scale_fator
$		dump load_scale_factors

		loadsbcs_eval_all()
		FOR(i = 1 TO num_loads)
			db_get_lbc(load_ids(i) , load_name , load_type , application_type , @
			elem_dimension , coord_id , dynamic_flag)/*获取Load信息*/
			IF( load_type == 7 || load_type == 8 || load_type == 10 || load_type == 34)THEN
				r.one_lbc_resultant(calculate_point , load_ids(i) , one_load_resultant)	
				FOR(j = 1 TO 6)
					load_resultants(j) += one_load_resultant(j) * load_case_scale_fator * load_scale_factors(i)
				END FOR
			END IF
		END FOR	
		
		dump load_resultants
		
	END FUNCTION
END CLASS